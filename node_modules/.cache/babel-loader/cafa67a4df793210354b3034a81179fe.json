{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dimitris.siamplis\\\\Desktop\\\\React-Node\\\\Front-End\\\\src\\\\pages\\\\FoodAndWine\\\\SpecificFood.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./SpecificFood.css\";\nimport { Chart } from \"react-google-charts\";\nimport { useState, useEffect } from \"react\";\nimport { Col, Form, Row, Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SpecificFood = () => {\n  _s();\n\n  const [results, setResults] = useState([]);\n  const [choice, setChoice] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [recipeSelected, setRecipeSelected] = useState(\"\");\n\n  const getSpecificFoodResults = () => {\n    let choiceDetails = {\n      choice: choice\n    };\n    fetch(\"http://localhost:4000/SpecificFood\", {\n      method: \"POST\",\n      body: JSON.stringify(choiceDetails),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      console.log(json);\n      setResults(json.opinion);\n    });\n  };\n\n  useEffect(() => {\n    getSpecificFoodResults();\n  }, []);\n  useEffect(() => {\n    let recipesArray = [];\n\n    if (results.length !== 0) {\n      for (const key in results) {\n        recipesArray.push(results[key].Name);\n      }\n\n      setRecipes(recipesArray); //console.log(recipesArray);\n    }\n  }, [results]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          children: [\" \", /*#__PURE__*/_jsxDEV(Form.Select, {\n            onChange: e => {\n              setRecipeSelected(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select recipe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), [...new Set(recipes)].map(recipe => /*#__PURE__*/_jsxDEV(\"option\", {\n              children: recipe\n            }, recipe, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), recipeSelected !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Results for \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [recipeSelected, \" recipe\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 27\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SpecificFood, \"4QskpcWCOhniYkHZWRN4c0T4v6M=\");\n\n_c = SpecificFood;\nexport default SpecificFood;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpecificFood\");","map":{"version":3,"sources":["C:/Users/dimitris.siamplis/Desktop/React-Node/Front-End/src/pages/FoodAndWine/SpecificFood.js"],"names":["React","Chart","useState","useEffect","Col","Form","Row","Spinner","SpecificFood","results","setResults","choice","setChoice","recipes","setRecipes","recipeSelected","setRecipeSelected","getSpecificFoodResults","choiceDetails","fetch","method","body","JSON","stringify","headers","then","res","json","console","log","opinion","recipesArray","length","key","push","Name","e","target","value","Set","map","recipe"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./SpecificFood.css\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Col, Form, Row, Spinner } from \"react-bootstrap\";\r\nconst SpecificFood = () => {\r\n  const [results, setResults] = useState([]);\r\n  const [choice, setChoice] = useState(\"\");\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [recipeSelected, setRecipeSelected] = useState(\"\");\r\n\r\n  const getSpecificFoodResults = () => {\r\n    let choiceDetails = {\r\n      choice: choice,\r\n    };\r\n    fetch(\"http://localhost:4000/SpecificFood\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(choiceDetails),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        console.log(json);\r\n\r\n        setResults(json.opinion);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSpecificFoodResults();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let recipesArray = [];\r\n    if (results.length !== 0) {\r\n      for (const key in results) {\r\n        recipesArray.push(results[key].Name);\r\n      }\r\n      setRecipes(recipesArray);\r\n      //console.log(recipesArray);\r\n    }\r\n  }, [results]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Row>\r\n          <Col xs={6}>\r\n            {\" \"}\r\n            <Form.Select\r\n              onChange={(e) => {\r\n                setRecipeSelected(e.target.value);\r\n              }}\r\n            >\r\n              <option value=\"\">Select recipe</option>\r\n\r\n              {[...new Set(recipes)].map((recipe) => (\r\n                <option key={recipe}>{recipe}</option>\r\n              ))}\r\n            </Form.Select>{\" \"}\r\n          </Col>\r\n        </Row>\r\n\r\n        {recipeSelected !== \"\" && (\r\n          <div>\r\n            <p>\r\n              Results for <strong>{recipeSelected} recipe</strong>{\" \"}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpecificFood;\r\n"]},"metadata":{},"sourceType":"module"}